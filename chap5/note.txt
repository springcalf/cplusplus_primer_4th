	对于位操作符，由于系统不能确保如何处理其操作数的符号位，所以强烈建议使用unsigned 整型操作数。
	左移操作符（<<）在右边插入 0 以补充空位。
	对于右移操作符（>>），如果其操作数是无符号数，则从左边开始插入0；如果操作数是有符号数，则插入符号位的副本或者 0 值，如何选择需依据具体的实现而定。
	
	道理很简单：因为前置操作需要做的工作更少，只需加 1 后返回加 1 后的结果即可。
	而后置操作符则必须先保存操作数原来的值，以便返回未加 1 之前的值作为操作的结果。对于 int 型对象和指针，编译器可优化掉这项额外工作。但是对于更多的复杂迭代器类型，这种额外工作可能会花费更大的代价。因此，养成使用前置操作这个好习惯，就不必操心性能差异的问题。
	
	解引用的优先级低于点操作符
	
	
	使用 sizeof 的结果部分地依赖所涉及的类型：
	• 对 char 类型或值为 char 类型的表达式做 sizeof 操作保证得 1。
	• 对引用类型做 sizeof 操作将返回存放此引用类型对象所需的内在空间大小。
	• 对指针做sizeof操作将返回存放指针所需的内在大小；注意，如果要获取该指针所指向对象的大小，则必须对指针进行引用
	• 对数组做 sizeof 操作等效于将对其元素类型做 sizeof 操作的结果乘上数组元素的个数。
	
	C++ 还提供了另外两种指针转换：指向任意数据类型的指针都可转换为void* 类型；整型数值常量 0 可转换为任意指针类型。