C++ 语言定义了几种基本类型：字符型、整型、浮点型

类型                    含义                      最小存储空间
bool                  boolean                         NA
char                  character                    8 bits
wchar_t             wide character           16 bits
short                  short integer              16 bits
int                        integer                     16 bits
long                    long integer               32 bits
float              single-precision floating-point 6 significant digits
double          double-precision floating-point 10 significant digits
long double  extended-precision floating-point  10 significant digits

2.1.1. 整型
表示整数、字符和布尔值的算术类型合称为整型.
一般， short类型为半个机器字长，int 类型为一个机器字长，而 long 类型为一个或两个机器字长（在 32 位机器中 int 类型和 long 类型通常字长是相同的）

0 值算术类型代表 false，任何非 0 的值都代表 true。

整型 int、short 和 long 都默认为带符号型。要获得无符号型则必须指定该类型为 unsigned.unsigned 后不加其他类型说明符意味着是 unsigned int

只有内置类型存在字面值，没有类类型的字面值

以 0（零）开头的字面值整数常量表示八进制，以 0x 或 0X 开头的表示十六进制。

在字符字面值前加 L 就能够得到 wchar_t类型的宽字符字面值

转义字符:
换行符 \n 水平制表符\t
纵向制表符 \v 退格符 \b
回车符 \r 进纸符 \f
报警（响铃）符 \a 反斜线 \\
疑问号 \? 单引号 \'
双引号 \"

字符’\0’通常表示“空字符（null character）”

为了兼容 C 语言，C++ 中所有的字符串字面值都由编译器自动在末尾添加一个空字符

在一行的末尾加一反斜线符号可将此行和下一行当作同一行处理。

变量提供了程序可以操作的有名字的存储区。C++ 中的每一个变量都有特定的类型，该类型决定了变量的内存大小和布局、能够存储于该内存中的值的取值范围以及可应用在该变量上的操作集

变量名，即变量的标识符，可以由字母、数字和下划线组成。变量名必须以字母或下划线开头，并且区分大小写字母：C++ 中的标识符都是大小写敏感的。

变量命名习惯
变量命名有许多被普遍接受的习惯，遵循这些习惯可以提高程序的可读性。
? 变量名一般用小写字母。例如，通常会写成 index，而不写成 Index 或INDEX。
? 标识符应使用能帮助记忆的名字，也就是说，能够提示其在程序中的用法的名字，如 on_loan 或 salary。
? 包含多个词的标识符书写为在每个词之间添加一个下划线，或者每个内嵌的词的第一个字母都大写。例如通常会写成 student_loan 或studentLoan，而不写成 studentloan。

C++ 支持两种初始化变量的形式：复制初始化和直接初始化。复制初始化语法用等号（=），直接初始化则是把初始化式放在括号中.直接初始化语法更灵活且效率更高

初始化指创建变量并给它赋初始值，而赋值则是擦除对象的当前值并用新值代替。


内置类型变量是否自动初始化取决于变量定义的位置。在函数体外定义的变量都初始化成 0，在函数体里定义的内置类型变量不进行自动初始化。除了用作赋值操作符的左操作数，未初始化变量用作任何其他用途都是没有定的。未初始化变量引起的错误难于发现.

建议每个内置类型的对象都要初始化。虽然这样做并不总是必需的，但是会更加容易和安全，除非你确定忽略
初始化式不会带来风险。

extern 声明不是定义，也不分配存储空间。事实上，它只是说明变量定义在程序的其他地方。程序中变量可以声明多次，但只能定义一次。

因为常量在定义后就不能被修改，所以定义时必须初始化.

在全局作用域声明的 const 变量是定义该对象的文件的局部变量。此变量只存在于那个文件中，不能被其他文件访问.通过指定 const 变更为 extern，就可以在整个程序中访问 const 对象

引用是一种复合类型，通过在变量名前添加“&”符号来定义。复合类型是指用其他类型定义的类型。在引用的情况下，每一种引用类型都“关联到”某一其他类型。不能定义引用类型的引用，但可以定义任何其他类型的引用。
引用必须定义时初始化。
当引用初始化后，只要该引用存在，它就保持绑定到初始化时指向的对象。不可能将引用绑定到另一个对象。

非 const 引用只能绑定到与该引用同类型的对象。const 引用则可以绑定到不同但相关的类型的对象或绑定到右值。


typedef 定义以关键字 typedef 开始，后面是数据类型和标识符。标识符或类型名并没有引入新的类型，而只是现有数据类型的同义词。typedef 名字可出现在程序中类型名可出现的任何位置。
typedef double wages;
wages hourly, weekly;
typedef 通常被用于以下三种目的：
? 为了隐藏特定类型的实现，强调使用类型的目的。
? 简化复杂的类型定义，使其更易理解。
? 允许一种类型用于多个目的，同时使得每次使用该类型的目的明确。

enum open_modes {input, output, append};
默认地，第一个枚举成员赋值为 0，后面的每个枚举成员赋的值比前面的大1。

类定义以关键字 class 开始，其后是该类的名字标识符。类体位于花括号里面。花括号后面必须要跟一个分号。

不是类的组成部分的代码不能访问 private 成员

用 class 和 struct 关键字定义类的唯一差别在于默认访问级别：默认情况下，struct 的成员为 public，而 class 的成员为 private。

头文件可以定义类、值在编译时就已知道的 const 对象和 inline 函数。

如果 const 变量不是用常量表达式初始化，那么它就不应该在头文件中定义。相反，和其他的变量一样，该 const 变量应该在一个源文件中定义并初始化。应在头文件中为它添加 extern 声明，以使其能被多个文件共享。


可以使用这些设施来预防多次包含同一头文件：
#ifndef SALESITEM_H
#define SALESITEM_H
// Definition of Sales_itemclass and related functions goes here
#endif

