using 声明的形式如下：
using namespace::name;
一旦使用了 using 声明，我们就可以直接引用名字，而不需要再引用该名字的命名空间。每个名字都需要一个 using 声明
eg:using std::cin;
     using std::string;


string 

#include <string>
using std:string;
string s1;
string s2(s1);
string s3("aaaaaa");
string s4('b',10);

string 类型的输入操作符：
• 读取并忽略开头所有的空白字符（如空格，换行符，制表符）。
• 读取字符直至再次遇到空白字符，读取终止。

getline。这个函数接受两个参数：
一个输入流对象和一个 string 对象。getline 函数从输入流的下一行读取，并保存读取的内容到不包括换行符。和输入操作符不一样的是，getline 并不忽略行开头的换行符。只要 getline 遇到换行符，即便它是输入的第一个字符，getline 也将停止读入并返回。如果第一个字符就是换行符，则 string 参数将被置为空 string。getline 函数将 istream 参数作为返回值，和输入操作符一样也把它用作判断条件.由于 getline 函数返回时丢弃换行符，换行符将不会存储在 string 对象中。

string对象的操作：
string s1;
s.empty()  如果 s 为空串，则返回 true，否则返回 false
s.size();返回 s 中字符的个数
s1=s2;把 s1 内容替换为 s2 的副本
s1+s2;把 s1 和s2 连接成一个新字符串，返回新生成的字符串
s[n];返回 s 中位置为 n 的字符，位置从 0 开始计数
v1 == v2;比较 v1 与 v2 的内容，相等则返回 true，否则返回 false
!=, <, <=, >, and >=;

任何一个大写之母都小于任意的小写字母

应该用 string::size_type 类型的变量接受 size 函数的返回值。在定义用作索引的变量时，出于同样的道理，string 对象的索引变量最好也用 string::size_type 类型。

C 标准库头文件命名形式为 name 而 C++ 版本则命名为 cname ，少了后缀，.h 而在头文件名前加了 c 表示这个头文件源自 C 标准

cctype 中的函数:
isalnum(c) 如果 c 是字母或数字，则为 True。
isalpha(c) 如果 c 是字母，则为 true。
iscntrl(c) 如果 c 是控制字符，则为 true
isdigit(c) 如果 c 是数字，则为 true。
isgraph(c) 如果 c 不是空格，但可打印，则为 true。
islower(c) 如果 c 是小写字母，则为 true。
isprint(c) 如果 c 是可打印的字符，则为 true。
ispunct(c) 如果 c 是标点符号，则 true。
isspace(c) 如果 c 是空白字符，则为 true。
isupper(c) 如果 c 是大写字母，则 true。
isxdigit(c) 如果是 c 十六进制数，则为 true。
tolower(c) 如果 c 大写字母，返回其小写字母形式，否则直接返回 c。
toupper(c) 如果 c 是小写字母，则返回其大写字母形式，否则直接返回 c。


vector 是同一种类型的对象的集合，每个对象都有一个对应的整数索引值。和 string 对象一样，标准库将负责管理与存储元素相关的内存。我们把 vector称为容器，是因为它可以包含其他对象。一个容器中的所有对象都必须是同一种类型的。

#include <vector>
using std::vector;


vector 不是一种数据类型，而只是一个类模板，可用来定义任意多种数据类型。vector 类型的每一种都指定了其保存元素的类型。因此，vector<int> 和 vector<string> 都是数据类型
初始化vector

vector<T> v1;           vector 保存类型为 T, 对象默认构造函数 v1 为空。
vector<T> v2(v1);     v2 是 v1 的一个副本。
vector<T> v3(n,i);     v3 包含 n 个值为 i 的元素。
vector<T> v4(n);       v4 含有值初始化的元素的 n 个副本

vector 对象（以及其他标准库容器对象）的重要属性就在于可以在运行时高效地添加元素。因为 vector 增长的效率高，在元素值已知的情况下，最好是动态地添加元素。


v.empty() 如果 v 为空，则返回 true，否则返回 false。
v.size() 返回 v 中元素的个数。
v.push_back(t) 在 v 的末尾增加一个值为 t 的元素。
v[n] 返回 v 中位置为 n 的元素。
v1 = v2 把 v1 的元素替换为 v2 中元素的副本。
v1 == v2 如果 v1 与 v2 相等，则返回 true。
!=, <, <=,>, and >=  保持这些操作符惯有的含义。

使用 size_type 类型时，必须指出该类型是在哪里定义的。vector 类型总是包括总是包括 vector 的元素类型：
vector<int>::size_type // ok
vector::size_type // error
下标操作不添加元素

	C++ 程序员习惯于优先选用 != 而不是 < 来编写循环判断条件.调用 size 成员函数而不保存它返回的值，在这个例子中同样不是必需的，但这反映了一种良好的编程习惯。在 C++ 中，有些数据结构（如vector）可以动态增长
必须是已存在的元素才能用下标操作符进行索引。通过下标操作进行赋值时，不会添加任何元素。


	迭代器是一种检查容器内元素并遍历元素的数据类型。
	vector<int>::iterator iter;
	每种容器都定义了一对命名为 begin 和 end 的函数，用于返回迭代器.由 begin 返回的迭代器指向第一个元素.由 end 操作返回的迭代器指向 vector 的“末端元素的下一个”。“超出
末端迭代器”（off-the-end iterator）。表明它指向了一个不存在的元素。
如果 vector 为空，begin 返回的迭代器与 end 返回的迭代器相同。由于 end 操作返回的迭代器不指向任何元素，因此不能对它进行解引用或自增操作.
	vector<int> ivec;
	iter = ivec.begin();
	
	迭代器类型可使用解引用操作符（dereference operator）（*）来访问迭代器所指向的元素.
	*iter = 0;
	用 == 或 != 操作符来比较两个迭代器，如果两个迭代器对象指向同一个元素，则它们相等，否则就不相等。
	
	
	当我们对普通 iterator 类型解引用时，得到对某个元素的非 const。而如果我们对 const_iterator 类型解引用时，则可以得到一个指向 const 对象的引用.
	vector<int>::const_iterator const_inte;
	
	const_iterator 对象:不能通过解引用来改变所指的值
	const 的 iterator 对象:一旦被初始化后不能改变iterator对象，但是可以改变iterator对象所指向的内容。
	const vector<int>::iterator iter=ivec.begin();
	*iter = 0;//ok
	iter++;//error
	
	任何改变 vector 长度的操作都会使已存在的迭代器失效。例如，在调用 push_back 之后，就不能再信赖指向 vector 的迭代器的值了
	
	
	标准库 bitset
	#include <bitset>
	using std::bitset;
	
	bitset 对象的定义和初始化:
	bitset<n> b; b 有 n 位，每位都 0
	bitset<n> b(u); b 是 unsigned long 型 u 的一个副本
	bitset<n> b(s); b 是 string 对象 s 中含有的位串的副本
	bitset<n> b(s, pos, n); b 是 s 中从位置 pos 开始的&nbps;n 个位的副本。
	
	ex:
	string str1("100100");
	bitset<10> b2(str1);// error if:bitset<10> b2("100100");
	bitset<10> b3(str1,2,3);// error if:bitset<10> b2("100100",2,3);
	unsigned long u = 0x100100;
	bitset<10> b4(u);
	
	用unsigned 值初始化 bitset 对象
	当用 unsigned long 值作为 bitset 对象的初始值时，该值将转化为二进制的位模式。而 bitset 对象中的位集作为这种位模式的副本。如果 bitset 类型长度大于 unsigned long 值的二进制位数，则其余的高阶位将置为 0；如果 bitset 类型长度小于 unsigned long 值的二进制位数，则只使用 unsigned 值中的低阶位，超过 bistset 类型长度的高阶位将被丢弃
	
	用string 对象初始化 bitset 对象:
	当用 string 对象初始化 bitset 对象时，string 对象直接表示为位模式。从 string 对象读入位集的顺序是从右向左（from right to left）：
	string str1("100100");
	bitset<10> b4(str1);
	cout<<"b4:"<<b4[5]<<b4[4]<<b4[3]<<b4[2]<<b4[1]<<b4[0]<<endl;// 结果为:b4:100100
	
	bitset 对象上的操作:
	b.any() b 中是否存在置为 1 的二进制位？
	b.none() b 中不存在置为 1 的二进制位吗？
	b.count() b 中置为 1 的二进制位的个数
	b.size() b 中二进制位的个数
	b[pos] 访问 b 中在 pos 处二进制位
	b.test(pos) b 中在 pos 处的二进制位置为 1 么？
	b.set() 把 b 中所有二进制位都置为 1
	b.set(pos) 把 b 中在 pos 处的二进制位置为 1
	b.reset() 把 b 中所有二进制位都置为 0
	b.reset(pos) 把 b 中在 pos 处的二进制位置为 0
	b.flip() 把 b 中所有二进制位逐位取反
	b.flip(pos) 把 b 中在 pos 处的二进制位取反
	b.to_ulong() 用 b 中同样的二进制位返回一个 unsigned long 值
	os << b 把 b 中的位集输出到 os 流
	
	
